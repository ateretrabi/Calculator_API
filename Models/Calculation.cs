/*
 * Simple Inventory API
 *
 * This is a simple API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: you@your-company.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace WebCalculator.IO.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Calculation : IEquatable<Calculation>
    {
        /// <summary>
        /// Gets or Sets FirstNumber
        /// </summary>
        [Required]
        [DataMember(Name = "firstNumber")]
        public decimal? FirstNumber { get; set; }

        /// <summary>
        /// Gets or Sets SecondNumber
        /// </summary>
        [Required]
        [DataMember(Name = "secondNumber")]
        public decimal? SecondNumber { get; set; }

        /// <summary>
        /// Gets or Sets _Operator
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum OperatorEnum
        {
            /// <summary>
            /// Enum AddEnum for add
            /// </summary>
            [EnumMember(Value = "add")]
            AddEnum = 0,
            /// <summary>
            /// Enum SubtractEnum for subtract
            /// </summary>
            [EnumMember(Value = "subtract")]
            SubtractEnum = 1,
            /// <summary>
            /// Enum MultiplyEnum for multiply
            /// </summary>
            [EnumMember(Value = "multiply")]
            MultiplyEnum = 2,
            /// <summary>
            /// Enum DivideEnum for divide
            /// </summary>
            [EnumMember(Value = "divide")]
            DivideEnum = 3
        }

        /// <summary>
        /// Gets or Sets _Operator
        /// </summary>
        [Required]
        [DataMember(Name = "operator")]
        public OperatorEnum Operator { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Calculation {\n");
            sb.Append("  FirstNumber: ").Append(FirstNumber).Append("\n");
            sb.Append("  SecondNumber: ").Append(SecondNumber).Append("\n");
            sb.Append("  Operator: ").Append(Operator).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Calculation)obj);
        }

        /// <summary>
        /// Returns true if Calculation instances are equal
        /// </summary>
        /// <param name="other">Instance of Calculation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Calculation other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    FirstNumber == other.FirstNumber ||
                    FirstNumber != null &&
                    FirstNumber.Equals(other.FirstNumber)
                ) &&
                (
                    SecondNumber == other.SecondNumber ||
                    SecondNumber != null &&
                    SecondNumber.Equals(other.SecondNumber)
                ) &&
                (
                    Operator == other.Operator &&
                    Operator.Equals(other.Operator)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (FirstNumber != null)
                    hashCode = hashCode * 59 + FirstNumber.GetHashCode();
                if (SecondNumber != null)
                    hashCode = hashCode * 59 + SecondNumber.GetHashCode();
                if (Operator != null)
                    hashCode = hashCode * 59 + Operator.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(Calculation left, Calculation right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Calculation left, Calculation right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
